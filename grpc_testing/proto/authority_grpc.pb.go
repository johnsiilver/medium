// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: medium/grpc_testing/proto/authority.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthorityClient is the client API for Authority service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorityClient interface {
	// ProcessExporter instructs the Processor to process some data from an exporter and
	// stream the results back.
	Servers(ctx context.Context, in *ServersReq, opts ...grpc.CallOption) (Authority_ServersClient, error)
}

type authorityClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorityClient(cc grpc.ClientConnInterface) AuthorityClient {
	return &authorityClient{cc}
}

func (c *authorityClient) Servers(ctx context.Context, in *ServersReq, opts ...grpc.CallOption) (Authority_ServersClient, error) {
	stream, err := c.cc.NewStream(ctx, &Authority_ServiceDesc.Streams[0], "/grpc_testing.authority.Authority/Servers", opts...)
	if err != nil {
		return nil, err
	}
	x := &authorityServersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Authority_ServersClient interface {
	Recv() (*ServerMsg, error)
	grpc.ClientStream
}

type authorityServersClient struct {
	grpc.ClientStream
}

func (x *authorityServersClient) Recv() (*ServerMsg, error) {
	m := new(ServerMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AuthorityServer is the server API for Authority service.
// All implementations must embed UnimplementedAuthorityServer
// for forward compatibility
type AuthorityServer interface {
	// ProcessExporter instructs the Processor to process some data from an exporter and
	// stream the results back.
	Servers(*ServersReq, Authority_ServersServer) error
	mustEmbedUnimplementedAuthorityServer()
}

// UnimplementedAuthorityServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorityServer struct {
}

func (UnimplementedAuthorityServer) Servers(*ServersReq, Authority_ServersServer) error {
	return status.Errorf(codes.Unimplemented, "method Servers not implemented")
}
func (UnimplementedAuthorityServer) mustEmbedUnimplementedAuthorityServer() {}

// UnsafeAuthorityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorityServer will
// result in compilation errors.
type UnsafeAuthorityServer interface {
	mustEmbedUnimplementedAuthorityServer()
}

func RegisterAuthorityServer(s grpc.ServiceRegistrar, srv AuthorityServer) {
	s.RegisterService(&Authority_ServiceDesc, srv)
}

func _Authority_Servers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServersReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuthorityServer).Servers(m, &authorityServersServer{stream})
}

type Authority_ServersServer interface {
	Send(*ServerMsg) error
	grpc.ServerStream
}

type authorityServersServer struct {
	grpc.ServerStream
}

func (x *authorityServersServer) Send(m *ServerMsg) error {
	return x.ServerStream.SendMsg(m)
}

// Authority_ServiceDesc is the grpc.ServiceDesc for Authority service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authority_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_testing.authority.Authority",
	HandlerType: (*AuthorityServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Servers",
			Handler:       _Authority_Servers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "medium/grpc_testing/proto/authority.proto",
}
